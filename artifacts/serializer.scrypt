
library Reader {
  bytes buf;
  int pos;
  constructor(bytes buf) {
    this.buf = buf;
    this.pos = 0;
  }
  function eof() : bool {
    return this.pos >= len(this.buf);
  }
  function readBytes() : bytes {
    int len = 0;
    bytes b = this.buf;
    bytes ret = b'';
    int header = unpack(b[this.pos : this.pos + 1]);
    this.pos++;
    if(header < 0x4c) {
        len = header;
        ret = b[this.pos : this.pos + len];
      } else if(header == 0x4c) {
        len = Utils.fromLEUnsigned(b[this.pos : this.pos + 1]);
        this.pos += 1;
        ret = b[this.pos : this.pos + len];
      } else if(header == 0x4d) {
        len = Utils.fromLEUnsigned(b[this.pos : this.pos + 2]);
        this.pos += 2;
        ret = b[this.pos : this.pos + len];
      } else if(header == 0x4e) {
        len = Utils.fromLEUnsigned(b[this.pos : this.pos + 1]);
        this.pos += 4;
        ret = b[this.pos : this.pos + len];
      } else {
        require(false);
      }
    this.pos += len;
    return ret;
  }
  function readBool() : bool {
    bytes b = this.buf[this.pos : this.pos + 1];
    this.pos++;
    return b'00' != b;
  }
  function readInt() : int {
    return unpack(this.readBytes());
  }
  static function getStateStart(bytes scriptCode) : int {
    int scriptLen = len(scriptCode);
    bytes lb = scriptCode[scriptLen - 3 + 1 : len(scriptCode)];
    int stateLen = unpack(lb);
    return scriptLen - stateLen - 3;
  }
}

library Writer {
  static function writeBytes(bytes b) : bytes {
    int n = len(b);
    bytes header = b'';
    if(n < 0x4c) {
        header = Utils.toLEUnsigned(n, 1);
      } else if(n < 0x100) {
        header = b'4c' + Utils.toLEUnsigned(n, 1);
      } else if(n < 0x10000) {
        header = b'4d' + Utils.toLEUnsigned(n, 2);
      } else if(n < 0x100000000) {
        header = b'4e' + Utils.toLEUnsigned(n, 4);
      } else {
        require(false);
      }
    return header + b;
  }
  static function writeBool(bool x) : bytes {
    return x ? b'01' : b'00';
  }
  static function writeInt(int x) : bytes {
    return Writer.writeBytes(x == 0 ? b'00' : pack(x));
  }
  static function serializeState(bytes stateBuf) : bytes {
    bytes lenBuf = Writer.writeBytes(num2bin(len(stateBuf), 3 - 1));
    return stateBuf + lenBuf;
  }
}

contract STest {
  public function testBool(bool f) {
    bytes buf = Writer.writeBool(f);
    Reader r = new Reader(buf);
    bool f_ = r.readBool();
    require(f_ == f);
    require(r.eof());
  }
  public function testBytes(bytes b) {
    bytes buf = Writer.writeBytes(b);
    Reader r = new Reader(buf);
    bytes b_ = r.readBytes();
    require(b_ == b);
    require(r.eof());
  }
  public function testInt(int i) {
    bytes buf = Writer.writeInt(i);
    Reader r = new Reader(buf);
    int i_ = r.readInt();
    require(i_ == i);
    require(r.eof());
  }
  public function main(bool f, bytes b, int i) {
    {
        bytes buf = Writer.writeBool(f);
        Reader r = new Reader(buf);
        bool f_ = r.readBool();
        require(f_ == f);
        require(r.eof());
      }
    {
        bytes buf = Writer.writeBytes(b);
        Reader r = new Reader(buf);
        bytes b_ = r.readBytes();
        require(b_ == b);
        require(r.eof());
      }
    {
        bytes buf = Writer.writeInt(i);
        Reader r = new Reader(buf);
        int i_ = r.readInt();
        require(i_ == i);
        require(r.eof());
      }
    bytes buf = Writer.writeInt(i) + Writer.writeBytes(b) + Writer.writeBytes(b) + Writer.writeBool(f) + Writer.writeInt(i) + Writer.writeBytes(b);
    Reader r = new Reader(buf);
    int i_ = r.readInt();
    require(i_ == i);
    require(!r.eof());
    bytes b_ = r.readBytes();
    require(b_ == b);
    b_ = r.readBytes();
    require(b_ == b);
    bool f_ = r.readBool();
    require(f_ == f);
    i_ = r.readInt();
    require(i_ == i);
    b_ = r.readBytes();
    require(b_ == b);
    require(r.eof());
  }
}