struct __scrypt_ts_Outpoint {  bytes txid;  int outputIndex;}  struct __scrypt_ts_UTXO {  __scrypt_ts_Outpoint outpoint;  bytes script;  int value;}  struct __scrypt_ts_ScriptContext {  bytes version;  bytes hashPrevouts;  bytes hashSequence;  bytes hashOutputs;  int locktime;  int sequence;  SigHashType sigHashType;  __scrypt_ts_UTXO utxo;  SigHashPreimage preimage;}
struct __scrypt_ts_Change {  int amount;  Ripemd160 address;}

contract Recallable {
  const PubKey issuerPubKey;
  @state PubKey userPubKey;
  __scrypt_ts_ScriptContext ctx;
  __scrypt_ts_Change __scrypt_ts_change;
  constructor(PubKey issuer) {
    this.issuerPubKey = issuer;
    this.userPubKey = issuer;
  }
  public function transfer(Sig userSig, PubKey receiverPubKey, int satoshisSent, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.ctx = Recallable.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    int satoshisTotal = this.ctx.utxo.value;
    require(satoshisSent > 0 && satoshisSent <= satoshisTotal);
    require(checkSig(userSig, this.userPubKey));
    PubKey previousUserPubKey = this.userPubKey;
    this.userPubKey = receiverPubKey;
    bytes outputs = this.buildStateOutput(satoshisSent);
    int satoshisLeft = satoshisTotal - satoshisSent;
    if(satoshisLeft > 0) {
        this.userPubKey = previousUserPubKey;
        outputs += this.buildStateOutput(satoshisLeft);
      }
    outputs += this.buildChangeOutput();
    require(hash256(outputs) == this.ctx.hashOutputs);
  }
  public function recall(Sig issuerSig, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.ctx = Recallable.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    require(checkSig(issuerSig, this.issuerPubKey));
    this.userPubKey = this.issuerPubKey;
    bytes outputs = this.buildStateOutput(this.ctx.utxo.value);
    outputs += this.buildChangeOutput();
    require(hash256(outputs) == this.ctx.hashOutputs);
  }
  static function createCtx(SigHashPreimage txPreimage) : __scrypt_ts_ScriptContext {  bytes version = SigHash.nVersion(txPreimage);  bytes hashPrevouts = SigHash.hashPrevouts(txPreimage);  bytes hashSequence = SigHash.hashSequence(txPreimage);  bytes hashOutputs = SigHash.hashOutputs(txPreimage);  int locktime = SigHash.nLocktime(txPreimage);  int sequence = SigHash.nSequence(txPreimage);  SigHashType sigHashType = SigHash.sigHashType(txPreimage);  bytes txid = SigHash.outpoint(txPreimage)[0 : 32];  int outputIndex = unpack(SigHash.outpoint(txPreimage)[32 :]);  __scrypt_ts_Outpoint outpoint = { txid, outputIndex };  bytes scriptCode = SigHash.scriptCode(txPreimage);  int value = SigHash.value(txPreimage);  __scrypt_ts_UTXO utxo = { outpoint, scriptCode, value };  return { version, hashPrevouts, hashSequence, hashOutputs, locktime, sequence, sigHashType, utxo, txPreimage };}
  function timeLock(int locktime): bool {  bool res = true;  res = this.ctx.sequence < 0xffffffff;  if (    locktime < 500000000  ) {    res = res && this.ctx.locktime < 500000000;  }  return res && this.ctx.locktime >= locktime;}
  function buildStateOutput(int amount) : bytes {  bytes script = this.getStateScript();  return Utils.buildOutput(script, amount);}
  function buildChangeOutput() : bytes {  return this.__scrypt_ts_change.amount > 0 ? Utils.buildOutput(Utils.buildPublicKeyHashScript(this.__scrypt_ts_change.address), this.__scrypt_ts_change.amount) : b'';}
}