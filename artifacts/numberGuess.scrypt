struct __scrypt_ts_Outpoint {  bytes txid;  int outputIndex;}  struct __scrypt_ts_UTXO {  __scrypt_ts_Outpoint outpoint;  bytes script;  int value;}  struct __scrypt_ts_ScriptContext {  bytes version;  bytes hashPrevouts;  bytes hashSequence;  bytes hashOutputs;  int locktime;  int sequence;  SigHashType sigHashType;  __scrypt_ts_UTXO utxo;  SigHashPreimage preimage;}

contract NumberGuess {
  PubKey alice;
  PubKey bob;
  const int alice_number;
  const int bob_number;
  __scrypt_ts_ScriptContext ctx;
  constructor(PubKey alice, PubKey bob, int alice_number, int bob_number) {
    this.alice = alice;
    this.bob = bob;
    this.alice_number = alice_number;
    this.bob_number = bob_number;
  }
  public function guess(Sig sig, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.ctx = NumberGuess.createCtx(__scrypt_ts_txPreimage);
    int amount = this.ctx.utxo.value;
    if(this.alice_number == this.bob_number) {
        bytes bobwin = Utils.buildOutput(Utils.buildPublicKeyHashScript(hash160(this.bob)), amount);
        require(checkSig(sig, this.bob));
      } else {
        bytes alicewin = Utils.buildOutput(Utils.buildPublicKeyHashScript(hash160(this.alice)), amount);
        require(checkSig(sig, this.alice));
      }
    require(this.alice_number >= 0 && this.alice_number <= 3);
  }
  static function createCtx(SigHashPreimage txPreimage) : __scrypt_ts_ScriptContext {  bytes version = SigHash.nVersion(txPreimage);  bytes hashPrevouts = SigHash.hashPrevouts(txPreimage);  bytes hashSequence = SigHash.hashSequence(txPreimage);  bytes hashOutputs = SigHash.hashOutputs(txPreimage);  int locktime = SigHash.nLocktime(txPreimage);  int sequence = SigHash.nSequence(txPreimage);  SigHashType sigHashType = SigHash.sigHashType(txPreimage);  bytes txid = SigHash.outpoint(txPreimage)[0 : 32];  int outputIndex = unpack(SigHash.outpoint(txPreimage)[32 :]);  __scrypt_ts_Outpoint outpoint = { txid, outputIndex };  bytes scriptCode = SigHash.scriptCode(txPreimage);  int value = SigHash.value(txPreimage);  __scrypt_ts_UTXO utxo = { outpoint, scriptCode, value };  return { version, hashPrevouts, hashSequence, hashOutputs, locktime, sequence, sigHashType, utxo, txPreimage };}
  function timeLock(int locktime): bool {  bool res = true;  res = this.ctx.sequence < 0xffffffff;  if (    locktime < 500000000  ) {    res = res && this.ctx.locktime < 500000000;  }  return res && this.ctx.locktime >= locktime;}
}