
struct Allowance {
  Ripemd160 owner;
  Ripemd160 spender;
}

struct ERC20Pair {
  Ripemd160 address;
  int balance;
}
struct __scrypt_ts_Outpoint {  bytes txid;  int outputIndex;}  struct __scrypt_ts_UTXO {  __scrypt_ts_Outpoint outpoint;  bytes script;  int value;}  struct __scrypt_ts_ScriptContext {  bytes version;  bytes hashPrevouts;  bytes hashSequence;  bytes hashOutputs;  int locktime;  int sequence;  SigHashType sigHashType;  __scrypt_ts_UTXO utxo;  SigHashPreimage preimage;}

contract ERC20 {
  @state HashedMap<Ripemd160,int> balances;
  VarIntReader __scrypt_ts_accessPathReaderForProp__balances;
  @state HashedMap<Allowance,int> allowances;
  VarIntReader __scrypt_ts_accessPathReaderForProp__allowances;
  bytes name;
  bytes symbol;
  int decimals;
  @state int totalSupply;
  PubKey issuer;
  static const Ripemd160 EMPTY_ADDR = Ripemd160(b'0000000000000000000000000000000000000000');
  __scrypt_ts_ScriptContext ctx;
  constructor(bytes name, bytes symbol, PubKey issuer, HashedMap<Ripemd160,int> balances, HashedMap<Allowance,int> allowances) {
    this.name = name;
    this.symbol = symbol;
    this.decimals = 18;
    this.totalSupply = 0;
    this.issuer = issuer;
    this.balances = balances;
    this.allowances = allowances;
  }
  public function mint(Sig sig, int issuerBalance, int amount, SigHashPreimage __scrypt_ts_txPreimage, bytes __scrypt_ts_accessPathForProp__balances) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.ctx = ERC20.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_accessPathReaderForProp__balances = new VarIntReader(__scrypt_ts_accessPathForProp__balances);
    Ripemd160 address = hash160(this.issuer);
    require(checkSig(sig, this.issuer));
    if(this.totalSupply == 0) {
        require(this.balances.set({address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, amount));
        this.totalSupply = amount;
      } else {
        require(this.balances.canGet({address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, issuerBalance));
        require(this.balances.set({address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, issuerBalance + amount));
        this.totalSupply += amount;
      }
    require(this.ctx.hashOutputs == hash256(this.buildStateOutput(this.ctx.utxo.value)));
  }
  public function balanceOf(Ripemd160 owner, int balance, SigHashPreimage __scrypt_ts_txPreimage, bytes __scrypt_ts_accessPathForProp__balances) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.ctx = ERC20.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_accessPathReaderForProp__balances = new VarIntReader(__scrypt_ts_accessPathForProp__balances);
    require(this.balances.canGet({owner, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, balance));
    require(this.ctx.hashOutputs == hash256(this.buildStateOutput(this.ctx.utxo.value)));
  }
  public function transfer(ERC20Pair from, PubKey pubkey, Sig sig, ERC20Pair to, int amount, SigHashPreimage __scrypt_ts_txPreimage, bytes __scrypt_ts_accessPathForProp__balances) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.ctx = ERC20.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_accessPathReaderForProp__balances = new VarIntReader(__scrypt_ts_accessPathForProp__balances);
    require(from.address != ERC20.EMPTY_ADDR);
    require(to.address != ERC20.EMPTY_ADDR);
    require(this.balances.canGet({from.address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, from.balance));
    require(from.balance >= amount);
    require(hash160(pubkey) == from.address);
    require(checkSig(sig, pubkey));
    require(this.balances.set({from.address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, from.balance - amount));
    if(this.balances.canGet({to.address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, to.balance)) {
        require(this.balances.set({to.address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, to.balance + amount));
      } else {
        require(this.balances.set({to.address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, amount));
      }
    require(this.ctx.hashOutputs == hash256(this.buildStateOutput(this.ctx.utxo.value)));
  }
  public function transferFrom(PubKey spender, Sig sig, int currentAllowance, ERC20Pair from, ERC20Pair to, int amount, SigHashPreimage __scrypt_ts_txPreimage, bytes __scrypt_ts_accessPathForProp__allowances, bytes __scrypt_ts_accessPathForProp__balances) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.ctx = ERC20.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_accessPathReaderForProp__allowances = new VarIntReader(__scrypt_ts_accessPathForProp__allowances);
    this.__scrypt_ts_accessPathReaderForProp__balances = new VarIntReader(__scrypt_ts_accessPathForProp__balances);
    require(to.address != ERC20.EMPTY_ADDR);
    require(checkSig(sig, spender));
    require(this.allowances.canGet({{from.address, hash160(spender)}, this.__scrypt_ts_accessPathReaderForProp__allowances.readInt()}, currentAllowance));
    require(currentAllowance > 0 && currentAllowance >= amount);
    require(this.allowances.set({{from.address, hash160(spender)}, this.__scrypt_ts_accessPathReaderForProp__allowances.readInt()}, currentAllowance - amount));
    require(from.address != ERC20.EMPTY_ADDR);
    require(to.address != ERC20.EMPTY_ADDR);
    require(this.balances.canGet({from.address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, from.balance));
    require(from.balance >= amount);
    require(this.balances.set({from.address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, from.balance - amount));
    if(this.balances.canGet({to.address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, to.balance)) {
        require(this.balances.set({to.address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, to.balance + amount));
      } else {
        require(this.balances.set({to.address, this.__scrypt_ts_accessPathReaderForProp__balances.readInt()}, amount));
      }
    require(this.ctx.hashOutputs == hash256(this.buildStateOutput(this.ctx.utxo.value)));
  }
  public function approve(PubKey owner, Sig sig, Ripemd160 spender, int amount, SigHashPreimage __scrypt_ts_txPreimage, bytes __scrypt_ts_accessPathForProp__allowances) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.ctx = ERC20.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_accessPathReaderForProp__allowances = new VarIntReader(__scrypt_ts_accessPathForProp__allowances);
    require(spender != ERC20.EMPTY_ADDR);
    require(checkSig(sig, owner));
    require(this.allowances.set({{hash160(owner), spender}, this.__scrypt_ts_accessPathReaderForProp__allowances.readInt()}, amount));
    require(this.ctx.hashOutputs == hash256(this.buildStateOutput(this.ctx.utxo.value)));
  }
  public function allowance(Ripemd160 owner, Ripemd160 spender, int amount, SigHashPreimage __scrypt_ts_txPreimage, bytes __scrypt_ts_accessPathForProp__allowances) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.ctx = ERC20.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_accessPathReaderForProp__allowances = new VarIntReader(__scrypt_ts_accessPathForProp__allowances);
    require(this.allowances.canGet({{owner, spender}, this.__scrypt_ts_accessPathReaderForProp__allowances.readInt()}, amount));
    require(this.ctx.hashOutputs == hash256(this.buildStateOutput(this.ctx.utxo.value)));
  }
  static function createCtx(SigHashPreimage txPreimage) : __scrypt_ts_ScriptContext {  bytes version = SigHash.nVersion(txPreimage);  bytes hashPrevouts = SigHash.hashPrevouts(txPreimage);  bytes hashSequence = SigHash.hashSequence(txPreimage);  bytes hashOutputs = SigHash.hashOutputs(txPreimage);  int locktime = SigHash.nLocktime(txPreimage);  int sequence = SigHash.nSequence(txPreimage);  SigHashType sigHashType = SigHash.sigHashType(txPreimage);  bytes txid = SigHash.outpoint(txPreimage)[0 : 32];  int outputIndex = unpack(SigHash.outpoint(txPreimage)[32 :]);  __scrypt_ts_Outpoint outpoint = { txid, outputIndex };  bytes scriptCode = SigHash.scriptCode(txPreimage);  int value = SigHash.value(txPreimage);  __scrypt_ts_UTXO utxo = { outpoint, scriptCode, value };  return { version, hashPrevouts, hashSequence, hashOutputs, locktime, sequence, sigHashType, utxo, txPreimage };}
  function timeLock(int locktime): bool {  bool res = true;  res = this.ctx.sequence < 0xffffffff;  if (    locktime < 500000000  ) {    res = res && this.ctx.locktime < 500000000;  }  return res && this.ctx.locktime >= locktime;}
  function buildStateOutput(int amount) : bytes {  bytes script = this.getStateScript();  return Utils.buildOutput(script, amount);}
}