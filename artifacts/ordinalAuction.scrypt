struct __scrypt_ts_Outpoint {  bytes txid;  int outputIndex;}  struct __scrypt_ts_UTXO {  __scrypt_ts_Outpoint outpoint;  bytes script;  int value;}  struct __scrypt_ts_ScriptContext {  bytes version;  bytes hashPrevouts;  bytes hashSequence;  bytes hashOutputs;  int locktime;  int sequence;  SigHashType sigHashType;  __scrypt_ts_UTXO utxo;  SigHashPreimage preimage;}
struct __scrypt_ts_Change {  int amount;  Ripemd160 address;}

contract OrdinalAuction {
  const bytes ordinalPrevout;
  @state PubKey bidder;
  const PubKey auctioneer;
  const int auctionDeadline;
  __scrypt_ts_ScriptContext ctx;
  __scrypt_ts_Change __scrypt_ts_change;
  bytes __scrypt_ts_prevouts;
  constructor(bytes ordinalPrevout, PubKey auctioneer, int auctionDeadline) {
    this.ordinalPrevout = ordinalPrevout;
    this.bidder = auctioneer;
    this.auctioneer = auctioneer;
    this.auctionDeadline = auctionDeadline;
  }
  public function bid(PubKey bidder, int bid, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.ctx = OrdinalAuction.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    int highestBid = this.ctx.utxo.value;
    require(bid > highestBid);
    PubKey highestBidder = this.bidder;
    this.bidder = bidder;
    bytes auctionOutput = this.buildStateOutput(bid);
    bytes refundOutput = Utils.buildOutput(Utils.buildPublicKeyHashScript(hash160(highestBidder)), highestBid);
    bytes outputs = auctionOutput + refundOutput;
    outputs += this.buildChangeOutput();
    require(hash256(outputs) == this.ctx.hashOutputs);
  }
  public function close(Sig sigAuctioneer, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress, bytes __scrypt_ts_prevouts) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.ctx = OrdinalAuction.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    require(hash256(__scrypt_ts_prevouts) == SigHash.hashPrevouts(__scrypt_ts_txPreimage));
    this.__scrypt_ts_prevouts = __scrypt_ts_prevouts;
    require(this.timeLock(this.auctionDeadline));
    require(checkSig(sigAuctioneer, this.auctioneer));
    require(this.__scrypt_ts_prevouts[0 : 36] == this.ordinalPrevout);
    bytes outputs = Utils.buildOutput(Utils.buildPublicKeyHashScript(hash160(this.bidder)), 1);
    outputs += Utils.buildOutput(Utils.buildPublicKeyHashScript(hash160(this.auctioneer)), this.ctx.utxo.value);
    outputs += this.buildChangeOutput();
    require(hash256(outputs) == this.ctx.hashOutputs);
  }
  static function createCtx(SigHashPreimage txPreimage) : __scrypt_ts_ScriptContext {  bytes version = SigHash.nVersion(txPreimage);  bytes hashPrevouts = SigHash.hashPrevouts(txPreimage);  bytes hashSequence = SigHash.hashSequence(txPreimage);  bytes hashOutputs = SigHash.hashOutputs(txPreimage);  int locktime = SigHash.nLocktime(txPreimage);  int sequence = SigHash.nSequence(txPreimage);  SigHashType sigHashType = SigHash.sigHashType(txPreimage);  bytes txid = SigHash.outpoint(txPreimage)[0 : 32];  int outputIndex = unpack(SigHash.outpoint(txPreimage)[32 :]);  __scrypt_ts_Outpoint outpoint = { txid, outputIndex };  bytes scriptCode = SigHash.scriptCode(txPreimage);  int value = SigHash.value(txPreimage);  __scrypt_ts_UTXO utxo = { outpoint, scriptCode, value };  return { version, hashPrevouts, hashSequence, hashOutputs, locktime, sequence, sigHashType, utxo, txPreimage };}
  function timeLock(int locktime): bool {  bool res = true;  res = this.ctx.sequence < 0xffffffff;  if (    locktime < 500000000  ) {    res = res && this.ctx.locktime < 500000000;  }  return res && this.ctx.locktime >= locktime;}
  function buildStateOutput(int amount) : bytes {  bytes script = this.getStateScript();  return Utils.buildOutput(script, amount);}
  function buildChangeOutput() : bytes {  return this.__scrypt_ts_change.amount > 0 ? Utils.buildOutput(Utils.buildPublicKeyHashScript(this.__scrypt_ts_change.address), this.__scrypt_ts_change.amount) : b'';}
}