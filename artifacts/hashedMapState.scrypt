struct __scrypt_ts_Outpoint {  bytes txid;  int outputIndex;}  struct __scrypt_ts_UTXO {  __scrypt_ts_Outpoint outpoint;  bytes script;  int value;}  struct __scrypt_ts_ScriptContext {  bytes version;  bytes hashPrevouts;  bytes hashSequence;  bytes hashOutputs;  int locktime;  int sequence;  SigHashType sigHashType;  __scrypt_ts_UTXO utxo;  SigHashPreimage preimage;}

contract HashedMapState {
  @state HashedMap<int,bytes> hashedmap;
  VarIntReader __scrypt_ts_accessPathReaderForProp__hashedmap;
  __scrypt_ts_ScriptContext ctx;
  constructor(HashedMap<int,bytes> hashedmap) {
    this.hashedmap = hashedmap;
  }
  public function insert(int key, bytes val, SigHashPreimage __scrypt_ts_txPreimage, bytes __scrypt_ts_accessPathForProp__hashedmap) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.ctx = HashedMapState.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_accessPathReaderForProp__hashedmap = new VarIntReader(__scrypt_ts_accessPathForProp__hashedmap);
    require(this.hashedmap.set({key, this.__scrypt_ts_accessPathReaderForProp__hashedmap.readInt()}, val));
    require(this.ctx.hashOutputs == hash256(this.buildStateOutput(this.ctx.utxo.value)));
  }
  public function canGet(int key, bytes val, SigHashPreimage __scrypt_ts_txPreimage, bytes __scrypt_ts_accessPathForProp__hashedmap) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.ctx = HashedMapState.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_accessPathReaderForProp__hashedmap = new VarIntReader(__scrypt_ts_accessPathForProp__hashedmap);
    require(this.hashedmap.has({key, this.__scrypt_ts_accessPathReaderForProp__hashedmap.readInt()}));
    require(this.hashedmap.canGet({key, this.__scrypt_ts_accessPathReaderForProp__hashedmap.readInt()}, val));
    require(this.ctx.hashOutputs == hash256(this.buildStateOutput(this.ctx.utxo.value)));
  }
  public function notExist(int key, SigHashPreimage __scrypt_ts_txPreimage, bytes __scrypt_ts_accessPathForProp__hashedmap) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.ctx = HashedMapState.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_accessPathReaderForProp__hashedmap = new VarIntReader(__scrypt_ts_accessPathForProp__hashedmap);
    require(!this.hashedmap.has({key, this.__scrypt_ts_accessPathReaderForProp__hashedmap.readInt()}));
    require(this.ctx.hashOutputs == hash256(this.buildStateOutput(this.ctx.utxo.value)));
  }
  public function update(int key, bytes val, SigHashPreimage __scrypt_ts_txPreimage, bytes __scrypt_ts_accessPathForProp__hashedmap) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.ctx = HashedMapState.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_accessPathReaderForProp__hashedmap = new VarIntReader(__scrypt_ts_accessPathForProp__hashedmap);
    require(this.hashedmap.set({key, this.__scrypt_ts_accessPathReaderForProp__hashedmap.readInt()}, val));
    require(this.ctx.hashOutputs == hash256(this.buildStateOutput(this.ctx.utxo.value)));
  }
  public function delete(int key, SigHashPreimage __scrypt_ts_txPreimage, bytes __scrypt_ts_accessPathForProp__hashedmap) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.ctx = HashedMapState.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_accessPathReaderForProp__hashedmap = new VarIntReader(__scrypt_ts_accessPathForProp__hashedmap);
    require(this.hashedmap.delete({key, this.__scrypt_ts_accessPathReaderForProp__hashedmap.readInt()}));
    require(this.ctx.hashOutputs == hash256(this.buildStateOutput(this.ctx.utxo.value)));
  }
  public function unlock(int key, bytes val, SigHashPreimage __scrypt_ts_txPreimage, bytes __scrypt_ts_accessPathForProp__hashedmap) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.ctx = HashedMapState.createCtx(__scrypt_ts_txPreimage);
    this.__scrypt_ts_accessPathReaderForProp__hashedmap = new VarIntReader(__scrypt_ts_accessPathForProp__hashedmap);
    loop (5) : i {
        require(this.hashedmap.set({(i), this.__scrypt_ts_accessPathReaderForProp__hashedmap.readInt()}, num2bin((i), (i))));
      }
    loop (5) : i {
        require(this.hashedmap.canGet({(i), this.__scrypt_ts_accessPathReaderForProp__hashedmap.readInt()}, num2bin((i), (i))));
        if(i == 3) {
          require(this.hashedmap.delete({key, this.__scrypt_ts_accessPathReaderForProp__hashedmap.readInt()}));
        } else if(i == 4) {
          require(this.hashedmap.set({key, this.__scrypt_ts_accessPathReaderForProp__hashedmap.readInt()}, val));
        }
      }
    require(this.ctx.hashOutputs == hash256(this.buildStateOutput(this.ctx.utxo.value)));
  }
  static function createCtx(SigHashPreimage txPreimage) : __scrypt_ts_ScriptContext {  bytes version = SigHash.nVersion(txPreimage);  bytes hashPrevouts = SigHash.hashPrevouts(txPreimage);  bytes hashSequence = SigHash.hashSequence(txPreimage);  bytes hashOutputs = SigHash.hashOutputs(txPreimage);  int locktime = SigHash.nLocktime(txPreimage);  int sequence = SigHash.nSequence(txPreimage);  SigHashType sigHashType = SigHash.sigHashType(txPreimage);  bytes txid = SigHash.outpoint(txPreimage)[0 : 32];  int outputIndex = unpack(SigHash.outpoint(txPreimage)[32 :]);  __scrypt_ts_Outpoint outpoint = { txid, outputIndex };  bytes scriptCode = SigHash.scriptCode(txPreimage);  int value = SigHash.value(txPreimage);  __scrypt_ts_UTXO utxo = { outpoint, scriptCode, value };  return { version, hashPrevouts, hashSequence, hashOutputs, locktime, sequence, sigHashType, utxo, txPreimage };}
  function timeLock(int locktime): bool {  bool res = true;  res = this.ctx.sequence < 0xffffffff;  if (    locktime < 500000000  ) {    res = res && this.ctx.locktime < 500000000;  }  return res && this.ctx.locktime >= locktime;}
  function buildStateOutput(int amount) : bytes {  bytes script = this.getStateScript();  return Utils.buildOutput(script, amount);}
}