
struct Owner {
  PubKey pubKey;
  bool validated;
}
struct __scrypt_ts_Outpoint {  bytes txid;  int outputIndex;}  struct __scrypt_ts_UTXO {  __scrypt_ts_Outpoint outpoint;  bytes script;  int value;}  struct __scrypt_ts_ScriptContext {  bytes version;  bytes hashPrevouts;  bytes hashSequence;  bytes hashOutputs;  int locktime;  int sequence;  SigHashType sigHashType;  __scrypt_ts_UTXO utxo;  SigHashPreimage preimage;}

contract StatefulMultiSig {
  Ripemd160 dest;
  @state Owner[3] owners;
  __scrypt_ts_ScriptContext ctx;
  constructor(Ripemd160 dest, Owner[3] owners) {
    this.dest = dest;
    this.owners = owners;
  }
  public function pay(SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.ctx = StatefulMultiSig.createCtx(__scrypt_ts_txPreimage);
    int nValid = 0;
    loop (3) : i {
        if(this.owners[i].validated) {
          nValid += 1;
        }
      }
    require(nValid >= (2));
    int amount = this.ctx.utxo.value;
    bytes output = Utils.buildOutput(Utils.buildPublicKeyHashScript(this.dest), amount);
    require(this.ctx.hashOutputs == hash256(output));
  }
  public function add(Sig sig, int pubKeyIdx, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c3')));
    this.ctx = StatefulMultiSig.createCtx(__scrypt_ts_txPreimage);
    bool added = false;
    loop (3) : i {
        if((i) == pubKeyIdx) {
          Owner owner = this.owners[i];
          bool valid = checkSig(sig, owner.pubKey);
          if(valid && !owner.validated) {
            this.owners[i].validated = true;
            added = true;
          }
        }
      }
    require(added);
    int amount = this.ctx.utxo.value;
    bytes output = this.buildStateOutput(amount);
    require(this.ctx.hashOutputs == hash256(output));
  }
  static function createCtx(SigHashPreimage txPreimage) : __scrypt_ts_ScriptContext {  bytes version = SigHash.nVersion(txPreimage);  bytes hashPrevouts = SigHash.hashPrevouts(txPreimage);  bytes hashSequence = SigHash.hashSequence(txPreimage);  bytes hashOutputs = SigHash.hashOutputs(txPreimage);  int locktime = SigHash.nLocktime(txPreimage);  int sequence = SigHash.nSequence(txPreimage);  SigHashType sigHashType = SigHash.sigHashType(txPreimage);  bytes txid = SigHash.outpoint(txPreimage)[0 : 32];  int outputIndex = unpack(SigHash.outpoint(txPreimage)[32 :]);  __scrypt_ts_Outpoint outpoint = { txid, outputIndex };  bytes scriptCode = SigHash.scriptCode(txPreimage);  int value = SigHash.value(txPreimage);  __scrypt_ts_UTXO utxo = { outpoint, scriptCode, value };  return { version, hashPrevouts, hashSequence, hashOutputs, locktime, sequence, sigHashType, utxo, txPreimage };}
  function timeLock(int locktime): bool {  bool res = true;  res = this.ctx.sequence < 0xffffffff;  if (    locktime < 500000000  ) {    res = res && this.ctx.locktime < 500000000;  }  return res && this.ctx.locktime >= locktime;}
  function buildStateOutput(int amount) : bytes {  bytes script = this.getStateScript();  return Utils.buildOutput(script, amount);}
}