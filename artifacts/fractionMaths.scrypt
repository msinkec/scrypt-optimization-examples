
struct Fraction {
  int n;
  int d;
}

library FRMath {
  static function add(Fraction x, Fraction y) : Fraction {
    return {x.n * y.d + y.n * x.d, x.d * y.d};
  }
  static function sAdd(Fraction x, Fraction y) : Fraction {
    require(x.d > 0 && y.d > 0);
    return {x.n * y.d + y.n * x.d, x.d * y.d};
  }
  static function sub(Fraction x, Fraction y) : Fraction {
    return {x.n * y.d - y.n * x.d, x.d * y.d};
  }
  static function sSub(Fraction x, Fraction y) : Fraction {
    require(x.d > 0 && y.d > 0);
    return {x.n * y.d - y.n * x.d, x.d * y.d};
  }
  static function mul(Fraction x, Fraction y) : Fraction {
    return {x.n * y.n, x.d * y.d};
  }
  static function sMul(Fraction x, Fraction y) : Fraction {
    require(x.d > 0 && y.d > 0);
    return {x.n * y.n, x.d * y.d};
  }
  static function div(Fraction x, Fraction y) : Fraction {
    return {x.n * y.d, x.d * y.n};
  }
  static function sDiv(Fraction x, Fraction y) : Fraction {
    require(x.d > 0 && y.d > 0 && y.n != 0);
    return {x.n * y.d, x.d * y.n};
  }
  static function abs(Fraction x) : Fraction {
    return {x.n >= 0 ? x.n : -x.n, x.d >= 0 ? x.d : -x.d};
  }
  static function sAbs(Fraction x) : Fraction {
    int absoluteN = FRMath.abs({x.n, 1}).n;
    return {absoluteN, x.d};
  }
  static function equal(Fraction x, Fraction y) : bool {
    return FRMath.sub(x, y).n == 0;
  }
  static function sEqual(Fraction x, Fraction y) : bool {
    return FRMath.sSub(x, y).n == 0;
  }
  static function toInt(Fraction x) : int {
    return x.n / x.d;
  }
  static function scaleUp(Fraction x, int s) : int {
    return (x.n * s) / x.d;
  }
}

contract FRMathTest {
  function runOp(int op, Fraction x, Fraction y) : Fraction {
    Fraction r = {0, 1};
    if(op == 0) {
        r = FRMath.add(x, y);
      } else if(op == 1) {
        r = FRMath.sub(x, y);
      } else if(op == 2) {
        r = FRMath.mul(x, y);
      } else if(op == 3) {
        r = FRMath.div(x, y);
      } else if(op == 4) {
        r = FRMath.abs(x);
      }
    return r;
  }
  function runSafeOp(int op, Fraction x, Fraction y) : Fraction {
    Fraction r = {0, 1};
    if(op == 0) {
        r = FRMath.sAdd(x, y);
      } else if(op == 1) {
        r = FRMath.sSub(x, y);
      } else if(op == 2) {
        r = FRMath.sMul(x, y);
      } else if(op == 3) {
        r = FRMath.sDiv(x, y);
      } else if(op == 4) {
        r = FRMath.sAbs(x);
      }
    return r;
  }
  public function unlock(Fraction x, Fraction y, Fraction z, int op, bool strict) {
    Fraction r = {0, 1};
    if(strict) {
        r = this.runSafeOp(op, x, y);
        require(FRMath.sEqual(r, z));
      } else {
        r = this.runOp(op, x, y);
        require(FRMath.equal(r, z));
      }
    require(true);
  }
  public function unlockScaled(int s, Fraction x, Fraction y, int op, bool strict, int sr) {
    Fraction r = {0, 1};
    if(strict) {
        r = this.runSafeOp(op, x, y);
      } else {
        r = this.runOp(op, x, y);
      }
    require(true);
  }
}